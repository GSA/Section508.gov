"use strict";(self.webpackChunk_articulate_mondrian_bundles=self.webpackChunk_articulate_mondrian_bundles||[]).push([[396,356,705],{4705:(n,e,t)=>{t.r(e),t.d(e,{derived:()=>i,get:()=>r.get_store_value,readable:()=>s,readonly:()=>c,writable:()=>u});var r=t(7112);const o=[];function s(n,e){return{subscribe:u(n,e).subscribe}}function u(n,e=r.noop){let t;const s=new Set;function u(e){if((0,r.safe_not_equal)(n,e)&&(n=e,t)){const e=!o.length;for(const e of s)e[1](),o.push(e,n);if(e){for(let n=0;n<o.length;n+=2)o[n][0](o[n+1]);o.length=0}}}function i(e){u(e(n))}return{set:u,update:i,subscribe:function(o,c=r.noop){const a=[o,c];return s.add(a),1===s.size&&(t=e(u,i)||r.noop),o(n),()=>{s.delete(a),0===s.size&&t&&(t(),t=null)}}}}function i(n,e,t){const o=!Array.isArray(n),u=o?[n]:n;if(!u.every(Boolean))throw new Error("derived() expects stores as input, got a falsy value");const i=e.length<2;return s(t,((n,t)=>{let s=!1;const c=[];let a=0,l=r.noop;const f=()=>{if(a)return;l();const s=e(o?c[0]:c,n,t);i?n(s):l=(0,r.is_function)(s)?s:r.noop},b=u.map(((n,e)=>(0,r.subscribe)(n,(n=>{c[e]=n,a&=~(1<<e),s&&f()}),(()=>{a|=1<<e}))));return s=!0,f(),function(){(0,r.run_all)(b),l(),s=!1}}))}function c(n){return{subscribe:n.subscribe.bind(n)}}},4356:(n,e,t)=>{t.d(e,{j:()=>o,x:()=>r});const r="4.2.18",o="4"}}]);